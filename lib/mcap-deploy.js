/*
 * mcap-deploy
 * https://github.com/mwaylabs/mcap-deploy
 *
 * Copyright (c) 2014 mwaylabs
 * Licensed under the MIT license.
 */

'use strict';

var formdata = require('node-formdata');
var path = require('path');
var assert = require('assert');
var ENDPPOINT = '/studio/upload';
var fs = require('fs');
var os = require('os');
var q = require('q');
var mcapEasyZip = require('mcap-easy-zip');
var request = require('request');
var organization = 'mway';
var os = require('os');
var IGNORE_FILE = '.mcapignore';

var getEndpoint = function (baseUrl, endpoint) {
    var ret = '';
    if (baseUrl.lastIndexOf('/') !== baseUrl.length - 1) {
        ret += '/';
    }
    return baseUrl + ret + endpoint;
};

/**
 * Get the current authentication to get the group of the user.
 */
var currentAuthentication = function (options, customRequest) {
    var deferred = q.defer();
    var endpoint = 'gofer/system/security/currentAuthorization';
    var req = customRequest || request;
    req.get(getEndpoint(options.baseurl, endpoint), {
        'auth': {
            'user': options.username,
            'pass': options.password
        },
        headers: {
            "Accept": "application/json",
            "Content-Type": "application/json"
        },
        method: 'GET'
    }, function (err, httpResponse, body) {
        if (err) {
            deferred.reject(err);
            return;
        }
        var data = null;
        try {
            data = JSON.parse(body);
        } catch (err) {
            deferred.reject(err);
            return err;
        }
        if (data && data.organization && data.organization.uniqueName) {
            organization = data.organization.uniqueName;
            deferred.resolve(data);
        } else {
            deferred.reject(new Error('Authentication failed'));
        }
    });

    return deferred.promise;
};

/**
 * Get the organisation and test if it has defaultRoles. If not raise an error. If an application is generated by a user in a group that has no defaultRoles the application
 * doesn't work as expected.
 */
var getOrganization = function (orga, options, customRequest) {
    assert(orga, 'Missing first parameter orga');
    assert(orga.uuid, 'Missing uuid for organization');

    var deferred = q.defer();
    var endpoint = 'gofer/security/rest/organizations/' + orga.uuid;
    var req = customRequest || request;
    req.get(getEndpoint(options.baseurl, endpoint), {
        'auth': {
            'user': options.username,
            'pass': options.password
        },
        headers: {
            "Accept": "application/json",
            "Content-Type": "application/json"
        },
        method: 'GET'
    }, function (err, httpResponse, body) {
        if (err) {
            deferred.reject(err);
            return;
        }
        var data = null;
        try {
            data = JSON.parse(body);
        } catch (err) {
            deferred.reject(err);
            return err;
        }

        if (data && Array.isArray(data.defaultRoles) && data.defaultRoles.length > 0) {
            deferred.resolve(data);
        } else {
            deferred.reject('Organization has no defaultRoles. This will cause problems creating applications. Operation not permitted.');
        }

    });

    return deferred.promise;
};

/**
 *
 * @param {Object} options
 * @config {String}   baseurl  mandatory
 * @config {String}   file
 * @config {Object}   fields {
 * @config {Function} progress
 * @config {String}   username
 * @config {String}   password
 * @config {String}   endpoint
 * @returns {promise|*|Q.promise|*|exports}
 */
var upload = function (options, request) {
    // the options for the request
    var endpoint = options.endpoint || ENDPPOINT;
    // add an beginning slash to the endpoint if there is none
    if (endpoint[0] !== '/') {
        endpoint = '/' + endpoint;
    }
    var importOptions = {
        url: getEndpoint(options.baseurl, organization + endpoint),
        headers: {
            "Accept": "application/json"
        },
        method: 'POST',
        file: options.file,
        fields: options.fields,
        progress: options.progress
    };
    if (options.username && options.password) {
        importOptions.auth = {
            "user": options.username,
            "pass": options.password
        };
    }

    return formdata(importOptions, request);
};

var getGlobPattern = function(sourcePath){
    var ignoreFilePath = path.normalize(sourcePath + '/' + IGNORE_FILE);
    if(fs.existsSync(ignoreFilePath)){
        var ignore = fs.readFileSync(ignoreFilePath, {
            encoding: 'utf8'
        });
        var pattern = ignore.split(os.EOL);
        // loop object to remove from the pattern array
        var patternCopy = ignore.split(os.EOL);
        // remove empty array entries coming e.g. from a empty the last line or something similar
        Object.keys(patternCopy).forEach(function(ind){
            if(!patternCopy[ind]){
                pattern.splice(ind, 1);
            } else {
                pattern[ind] = '!' + pattern[ind];
            }
        });
        pattern.unshift('**/*');
        return pattern;
    }
    return ['**/*'];
};

var createZip = function (rootPath) {
    var deferred = q.defer();

    var zipFilePath = path.resolve(os.tmpdir() + '/mcap_app_' + Date.now() + '.zip');

    mcapEasyZip(rootPath, zipFilePath, {}, function (err, files) {
        if (err) {
            deferred.reject(err);
        }
        deferred.resolve(zipFilePath, files);
    });
    return deferred.promise;
};

var deleteZip = function (zipPath) {
    return fs.unlinkSync(zipPath);
};

var deploy = function (options, request) {
    assert(options, 'Missing argument: options');
    assert(options.baseurl, 'Missing argument: options.baseurl');
    assert(options.rootPath, 'Missing argument: options.rootPath');

    var rootPath = options.rootPath;
    delete options.rootPath;
    return currentAuthentication(options, request).then(function (data) {
        return getOrganization(data.organization, options, request).then(function () {
            return createZip(rootPath).then(function (zipPath) {
                options.file = zipPath;
                return upload(options, request).then(function (response) {
                    console.log(zipPath);
                    //deleteZip(zipPath);
                    return {
                        zipPath: zipPath,
                        options: options,
                        response: JSON.parse(response),
                        endpoint: getEndpoint(options.baseurl, organization)
                    };
                }, function(err){
                    deleteZip(zipPath);
                    throw new Error(err.body || err);
                });
            });
        });
    });
};

// API
exports.deploy = deploy;

// API for Tests
exports.getEndpoint = getEndpoint;
exports.ENDPPOINT = ENDPPOINT;
exports.upload = upload;
exports.createZip = createZip;
exports.getGlobPattern = getGlobPattern;
